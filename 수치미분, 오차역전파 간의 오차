import os, sys
# sys.path.append(os.pardir)
import numpy as np
from dataset.mnist import load_mnist
from two_layer_net import TwoLayerNet

(x_train, t_train) , (x_test, t_test) = \
load_mnist(normalize = True, one_hot_label = True)
network = TwoLayerNet(input_size = 784, hidden_size= 50, output_size= 10)

iters_num = 10000
train_size = x_train.shape[0]
batch_size = 100
learning_rate = 0.1

train_loss_list = []
train_acc_list = []
test_acc_list = []

iter_per_epoch = max(train_size / batch_size , 1)

print(iter_per_epoch)

for i in range(iters_num):
      batch_mask = np.random.choice(train_size, batch_size)
      x_batch = x_train[batch_mask]
      t_batch = t_train[batch_mask]

      grad = network.gradient(x_batch, t_batch)

      for key in ('W1', 'b1', 'W2', 'b2') :
            network.params[key] -= learning_rate * grad[key]

      loss = network.loss(x_batch, t_batch)
      train_loss_list.append(loss)

      if i % iter_per_epoch == 0 :
            train_acc = network.accuracy(x_train, t_train)
            test_acc = network.accuracy(x_test, t_test)
            train_acc_list.append(train_acc)
            test_acc_list.append(test_acc)
            print(train_acc ,  test_acc)




x_batch1 = x_train[:3]
t_batch1 = t_train[:3]

grad_numerical = network.numerical_gradient(x_batch1, t_batch1)
grad_backprop = network.gradient(x_batch1, t_batch1)

# 각 가중치들의 차이의 절댓값을 구한 후, 그 절댓값들의 평균을 낸다
for key in grad_numerical.keys():
      diff = np.average(np.abs(grad_backprop[key] - grad_numerical[key]))

      print(key + ":" + str(diff))
# 3개 배치를 해서 |그라디언트 – 수치미분| 의 평균
# 3개 배치을 한 것이 매우 차이가 적었고, 100개 배치를 하면 차이가 좀 난다. 
# 하지만 이 정도는 무시할 수 있을 정도이다.

x_batch2 = x_train[:200]
t_batch2 = t_train[:200]

grad_numerical = network.numerical_gradient(x_batch2, t_batch1)
grad_backprop = network.gradient(x_batch2, t_batch1)

# 각 가중치들의 차이의 절댓값을 구한 후, 그 절댓값들의 평균을 낸다
for key in grad_numerical.keys():
      diff = np.average(np.abs(grad_backprop[key] - grad_numerical[key]))

      print(key + ":" + str(diff))



# def _change_one_hot_label(X):
#           T = np.zeros((X.size, 10))
#     for idx, row in enumerate(T):
#         row[X[idx]] = 1
        
#     return T

# X1 = np.rand(300,20)
# _change_one_hot_label(X1)